################################################################################
# Azure AI Search Knowledge Agent Demo (Sanitized Template)
# Goal: Minimal end-to-end walkthrough from knowledge sources ‚Üí agent ‚Üí retrieval.
# API versions: Search KR = 2025-08-01-Preview, Foundry = 2025-05-01
#
# How to run (no secrets checked in):
#   1) Set environment variables (VS Code REST Client loads .env automatically):
#        setx SEARCH_API_KEY "<your-search-admin-or-query-key>"
#        setx OPTIONAL_USER_TOKEN "Bearer <aad-token-if-needed>"
#        setx FOUNDRY_BEARER_TOKEN "Bearer <aad-bearer-token>"
#   2) Replace ALL angle-bracket placeholders (<...>) below.
#   3) Prepare blob content for each knowledge source (folder paths configurable).
#   4) Send requests from VS Code "REST Client" or Thunder Client.
#
# Supported chat / completion deployments (use exactly these model names):
#   gpt-4o | gpt-4o-mini | gpt-4.1-nano | gpt-4.1-mini | gpt-4.1 | gpt-5 | gpt-5-mini | gpt-5-nano
#
# Supported embedding deployments:
#   text-embedding-ada-002 | text-embedding-3-large | text-embedding-3-small
################################################################################

################################################################################
# ‚öôÔ∏è CONFIGURATION & AUTHENTICATION
################################################################################

### Azure AI Search endpoint and API version
@search-endpoint = https://<your-search-service>.search.windows.net
@search-api-version = 2025-08-01-Preview

### Azure OpenAI resource for embeddings + responses
@aoai-endpoint = https://<your-aoai-resource>.openai.azure.com
@aoai-embedding-deployment = <your-embedding-deployment-name>       // e.g., text-embedding-3-large
@aoai-chat-deployment = <your-chat-deployment-name>                 // e.g., gpt-4o-mini

### Azure Storage container that holds your documents
@storage-resource-id = /subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>
@storage-container = <your-blob-container>

### Security headers (store tokens in env vars; refresh before every session)
# PowerShell example:
#   az account get-access-token --resource https://search.azure.com --query accessToken -o tsv
@search-api-key = {{$env SEARCH_API_KEY}}
@optional-user-token = {{$env OPTIONAL_USER_TOKEN}}                 // optional Bearer token for user context

### Logical resource names (rename to fit your scenario)
@ks-prefix = <your-knowledge-source-prefix>                         // e.g., "kb-demo"
@foundry-assistant-name = {{ks-prefix}}-agent
@ks-primary = {{ks-prefix}}-primary
@ks-secondary = {{ks-prefix}}-secondary
@agent-name = {{foundry-assistant-name}}

### MCP/Foundry wiring (optional; used in Section 4)
@mcp-server-label = <your_mcp_label>                                // letters, numbers, underscores only
@mcp-server-url = {{search-endpoint}}/agents/{{foundry-assistant-name}}/mcp?api-version={{search-api-version}}

### Optional: Azure AI Foundry project (only needed for Section 4)
@foundry-project-endpoint = https://<your-foundry>.services.ai.azure.com/api/projects/<your-project-id>
@foundry-api-version = 2025-05-01
@foundry-bearer-token = {{$env FOUNDRY_BEARER_TOKEN}}

# Placeholders for Section 4 run workflow (fill once you create resources)
@assistant-id = <asst_xxx>
@thread-id = <thread_xxx>
@run-id = <run_xxx>

################################################################################
# üìã SECTION 1: CREATE KNOWLEDGE SOURCES
################################################################################

### 1.1 Create knowledge source (FAQ / primary content)
PUT {{search-endpoint}}/knowledgeSources/{{ks-primary}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "name": "{{ks-primary}}",
  "kind": "azureBlob",
  "description": "Primary knowledge source (e.g., FAQ, quick-start guides).",
  "azureBlobParameters": {
    "connectionString": "ResourceId={{storage-resource-id}};",
    "containerName": "{{storage-container}}",
    "folderPath": "<folder-path-for-primary-docs>/",
    "embeddingModel": {
      "name": "{{aoai-embedding-deployment}}",
      "kind": "azureOpenAI",
      "azureOpenAIParameters": {
        "resourceUri": "{{aoai-endpoint}}",
        "modelName": "{{aoai-embedding-deployment}}",
        "deploymentId": "{{aoai-embedding-deployment}}"
      }
    }
    // Optional: add "chatCompletionModel" if you want per-source overrides
  }
}

###

### 1.2 Create knowledge source (Policies / secondary content)
PUT {{search-endpoint}}/knowledgeSources/{{ks-secondary}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "name": "{{ks-secondary}}",
  "kind": "azureBlob",
  "description": "Secondary knowledge source (e.g., policy PDFs, compliance docs).",
  "azureBlobParameters": {
    "connectionString": "ResourceId={{storage-resource-id}};",
    "containerName": "{{storage-container}}",
    "folderPath": "<folder-path-for-secondary-docs>/",
    "embeddingModel": {
      "name": "{{aoai-embedding-deployment}}",
      "kind": "azureOpenAI",
      "azureOpenAIParameters": {
        "resourceUri": "{{aoai-endpoint}}",
        "modelName": "{{aoai-embedding-deployment}}",
        "deploymentId": "{{aoai-embedding-deployment}}"
      }
    }
  }
}

################################################################################
# üß† SECTION 2: CREATE KNOWLEDGE AGENT
################################################################################

PUT {{search-endpoint}}/agents/{{agent-name}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "name": "{{agent-name}}",
  "description": "Generic knowledge agent that blends FAQ-style content with policy guidance.",
  "retrievalInstructions": "Route how-to questions to the primary source; route policy/compliance questions to the secondary source. For mixed questions, retrieve from both and cite both.",
  "knowledgeSources": [
    {
      "name": "{{ks-primary}}",
      "alwaysQuerySource": true,
      "includeReferences": true,
      "includeReferenceSourceData": true
    },
    {
      "name": "{{ks-secondary}}",
      "alwaysQuerySource": true,
      "includeReferences": true,
      "includeReferenceSourceData": true
    }
  ],
  "models": [
    {
      "kind": "azureOpenAI",
      "azureOpenAIParameters": {
        "resourceUri": "{{aoai-endpoint}}",
        "apiKey": null,
        "deploymentId": "{{aoai-chat-deployment}}",
        "modelName": "{{aoai-chat-deployment}}"
      }
    }
  ],
  "outputConfiguration": {
    "modality": "answerSynthesis",
    "includeActivity": true
  }
}

################################################################################
# üîç SECTION 3: TEST RETRIEVAL FLOWS
################################################################################

### Happy-path inquiry
POST {{search-endpoint}}/agents/{{agent-name}}/retrieve?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "messages": [
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "Ask a representative question that should draw from the primary knowledge source."
        }
      ]
    }
  ],
  "user": "{{optional-user-token}}"    // optional; include only if you pass user context
}

###

### Policy & guidelines scenario
POST {{search-endpoint}}/agents/{{agent-name}}/retrieve?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "messages": [
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "Ask a question that should rely on the policy or compliance source."
        }
      ]
    }
  ]
}

################################################################################
# ü§ù SECTION 4 (OPTIONAL): CREATE AZURE AI FOUNDRY ASSISTANT WITH MCP
################################################################################

# Run only if you plan to expose the knowledge agent through Azure AI Foundry.

### Create assistant
POST {{foundry-project-endpoint}}/assistants?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
  "name": "{{foundry-assistant-name}}",
  "model": "<choose-supported-model>",
  "instructions": "You are a knowledge assistant. Answer only from approved knowledge sources using your MCP Knowledge tool. Always cite your sources.",
  "tools": [
    {
      "type": "mcp",
      "server_label": "{{mcp-server-label}}",
      "server_url": "{{mcp-server-url}}",
      "allowed_tools": [
        "knowledge_agent_retrieve"
      ]
    }
  ]
}

### Create a thread for the assistant (capture thread_id from response)
POST {{foundry-project-endpoint}}/threads?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{}

### Add a user question to the thread
POST {{foundry-project-endpoint}}/threads/{{thread-id}}/messages?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
  "role": "user",
  "content": "<your-user-question>"
}

### Run the assistant, forwarding the Search admin key for MCP access
POST {{foundry-project-endpoint}}/threads/{{thread-id}}/runs?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
  "assistant_id": "{{assistant-id}}",
  "tool_resources": {
    "mcp": [
      {
        "server_label": "{{mcp-server-label}}",
        "require_approval": "never",
        "headers": {
          "api-key": "{{search-api-key}}"
        }
      }
    ]
  }
}

### Poll the run for completion (set @run-id to the value returned above)
GET {{foundry-project-endpoint}}/threads/{{thread-id}}/runs/{{run-id}}?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

### Get the latest assistant response for the thread
GET {{foundry-project-endpoint}}/threads/{{thread-id}}/messages?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

################################################################################
# ‚úÖ CLEANUP WHEN FINISHED
################################################################################

### Delete assistant (if created)
DELETE {{foundry-project-endpoint}}/assistants/{{foundry-assistant-name}}?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

### Delete agent
DELETE {{search-endpoint}}/agents/{{agent-name}}?api-version={{search-api-version}}
api-key: {{search-api-key}}

### Delete knowledge sources
DELETE {{search-endpoint}}/knowledgeSources/{{ks-primary}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
###
DELETE {{search-endpoint}}/knowledgeSources/{{ks-secondary}}?api-version={{search-api-version}}
api-key: {{search-api-key}}