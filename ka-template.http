################################################################################
# Azure AI Search Knowledge Agent Template (Sanitized)
# Goal: Minimal end-to-end walkthrough from knowledge sources ‚Üí agent ‚Üí retrieval.
# API versions: Search KR = 2025-08-01-Preview, Foundry = 2025-05-01
#
# How to run (no secrets checked in):
#   1) Set environment variables (VS Code REST Client loads .env automatically):
#        setx SEARCH_API_KEY "<your-search-admin-or-query-key>"
#        setx FOUNDRY_API_KEY "<your-foundry-api-key>"
#        setx FOUNDRY_BEARER_TOKEN "Bearer <aad-bearer-token>"
#   2) Replace ALL angle-bracket placeholders (<...>) below.
#   3) Prepare blob content for each knowledge source (folder paths configurable).
#   4) Send requests from VS Code "REST Client" or Thunder Client.
#
# Supported chat / completion deployments (use exactly these model names):
#   gpt-4o | gpt-4o-mini | gpt-4.1-nano | gpt-4.1-mini | gpt-4.1 | gpt-5 | gpt-5-mini | gpt-5-nano
#
# Supported embedding deployments:
#   text-embedding-ada-002 | text-embedding-3-large | text-embedding-3-small
################################################################################

################################################################################
# ‚öôÔ∏è CONFIGURATION & AUTHENTICATION
################################################################################

### Azure AI Search endpoint and API version
@search-endpoint = https://<your-search-service>.search.windows.net
@search-api-version = 2025-08-01-Preview

### Azure AI Foundry project endpoint (unified with Azure OpenAI)
# Note: Only Azure OpenAI models are supported for knowledge sources and agents at this time
@foundry-project = https://<your-foundry-resource>.cognitiveservices.azure.com
@foundry-embedding = <your-embedding-deployment>           // e.g., text-embedding-3-large
@foundry-chat = <your-chat-deployment>                     // e.g., gpt-4.1-mini
@foundry-api-key = {{$env FOUNDRY_API_KEY}}

### Azure Storage container that holds your documents
@storage-resource-id = /subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>
@storage-container = <your-blob-container>

### Security headers (store tokens in env vars; refresh before every session)
# PowerShell example:
#   az account get-access-token --resource https://search.azure.com --query accessToken -o tsv
@search-api-key = {{$env SEARCH_API_KEY}}
@optional-user-token = {{$env OPTIONAL_USER_TOKEN}}        // optional Bearer token for user context

### Logical resource names (rename to fit your scenario)
@ks-prefix = <your-knowledge-source-prefix>                // e.g., "demo"
@ks-primary-source = {{ks-prefix}}-primary-source
@ks-secondary-source = {{ks-prefix}}-secondary-source
@knowledge-base = {{ks-prefix}}-knowledge-base

### Optional: Azure AI Foundry project (needed for Section 4)
@foundry-endpoint = https://<your-foundry-resource>.services.ai.azure.com/api/projects/<your-project-id>
@foundry-api-version = 2025-05-01
@foundry-bearer-token = {{$env FOUNDRY_BEARER_TOKEN}}

### Logical resource names for Foundry Assistant
@foundry-assistant-name = {{ks-prefix}}-agent

### MCP/Foundry wiring (used in Section 4)
@mcp-server-label = <your_mcp_label>                       // letters, numbers, underscores only (e.g., demo_knowledge_agent)
@mcp-server-url = {{search-endpoint}}/agents/{{knowledge-base}}/mcp?api-version={{search-api-version}}

################################################################################
# üì¶ SECTION 1: CREATE KNOWLEDGE SOURCES
################################################################################

### 1.1 Create primary knowledge source
# Description: Primary content source (e.g., FAQ, quick-start guides)
# Use case: How-to questions, getting started documentation
PUT {{search-endpoint}}/knowledgeSources/{{ks-primary-source}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "name": "{{ks-primary-source}}",
  "kind": "azureBlob",
  "description": "Primary knowledge source (e.g., FAQ, quick-start guides).",
  "azureBlobParameters": {
    "connectionString": "ResourceId={{storage-resource-id}};",
    "containerName": "{{storage-container}}",
    "folderPath": "<folder-path-for-primary-docs>/",
    "embeddingModel": {
      "name": "{{foundry-embedding}}",
      "kind": "azureOpenAI",
      "azureOpenAIParameters": {
        "resourceUri": "{{foundry-project}}",
        "modelName": "{{foundry-embedding}}",
        "deploymentId": "{{foundry-embedding}}",
        "apiKey": "{{foundry-api-key}}"
      }
    }
  }
}

###

### 1.2 Create secondary knowledge source
# Description: Secondary content source (e.g., policy PDFs, compliance docs)
# Use case: Policy guidance, compliance questions
PUT {{search-endpoint}}/knowledgeSources/{{ks-secondary-source}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "name": "{{ks-secondary-source}}",
  "kind": "azureBlob",
  "description": "Secondary knowledge source (e.g., policy PDFs, compliance docs).",
  "azureBlobParameters": {
    "connectionString": "ResourceId={{storage-resource-id}};",
    "containerName": "{{storage-container}}",
    "folderPath": "<folder-path-for-secondary-docs>/",
    "embeddingModel": {
      "name": "{{foundry-embedding}}",
      "kind": "azureOpenAI",
      "azureOpenAIParameters": {
        "resourceUri": "{{foundry-project}}",
        "modelName": "{{foundry-embedding}}",
        "deploymentId": "{{foundry-embedding}}",
        "apiKey": "{{foundry-api-key}}"
      }
    }
  }
}

################################################################################
# üß† SECTION 2: CREATE KNOWLEDGE BASE / AGENT
################################################################################

### 2.1 Create Knowledge Base
# Purpose: Generic knowledge agent that blends multiple content sources
# Knowledge Sources: Primary (how-to) + Secondary (policy/compliance)
# Retrieval Logic: Route based on query intent
# Note: Only Azure OpenAI models are supported at this time
PUT {{search-endpoint}}/agents/{{knowledge-base}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "name": "{{knowledge-base}}",
  "description": "Generic knowledge agent that blends FAQ-style content with policy guidance.",
  "retrievalInstructions": "Route how-to questions to the primary source; route policy/compliance questions to the secondary source. For mixed questions, retrieve from both and cite both.",
  "knowledgeSources": [
    {
      "name": "{{ks-primary-source}}",
      "alwaysQuerySource": true,
      "includeReferences": true,
      "includeReferenceSourceData": true
    },
    {
      "name": "{{ks-secondary-source}}",
      "alwaysQuerySource": true,
      "includeReferences": true,
      "includeReferenceSourceData": true
    }
  ],
  "models": [
    {
      "kind": "azureOpenAI",
      "azureOpenAIParameters": {
        "resourceUri": "{{foundry-project}}",
        "apiKey": "{{foundry-api-key}}",
        "deploymentId": "{{foundry-chat}}",
        "modelName": "{{foundry-chat}}"
      }
    }
  ],
  "outputConfiguration": {
    "modality": "answerSynthesis",
    "includeActivity": true
  }
}

################################################################################
# üîç SECTION 3: TEST RETRIEVAL FLOWS
################################################################################

### 3.1 Simple Query: How-to question
# Expected: Response from primary knowledge source
# Difficulty: Simple - direct lookup
POST {{search-endpoint}}/agents/{{knowledge-base}}/retrieve?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "messages": [
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "Ask a representative question that should draw from the primary knowledge source."
        }
      ]
    }
  ]
}

###

### 3.2 Moderate Query: Policy & guidelines scenario
# Expected: Response from secondary knowledge source
# Difficulty: Moderate - requires policy/compliance knowledge
POST {{search-endpoint}}/agents/{{knowledge-base}}/retrieve?api-version={{search-api-version}}
api-key: {{search-api-key}}
Content-Type: application/json

{
  "messages": [
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "Ask a question that should rely on the policy or compliance source."
        }
      ]
    }
  ]
}

################################################################################
# ü§ù SECTION 4: CREATE AZURE AI FOUNDRY ASSISTANT WITH MCP
################################################################################

### 4.1 Create Foundry Assistant
# Purpose: Expose knowledge-base through Azure AI Foundry with MCP integration
# MCP Server Label: Use underscores only (no hyphens)
# Note: Only Azure OpenAI models are supported at this time
POST {{foundry-endpoint}}/assistants?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
  "name": "{{foundry-assistant-name}}",
  "model": "{{foundry-chat}}",
  "instructions": "You are a knowledge assistant. Answer only from approved knowledge sources using your MCP Knowledge tool. Always cite your sources and be concise.",
  "tools": [
    {
      "type": "mcp",
      "server_label": "{{mcp-server-label}}",
      "server_url": "{{mcp-server-url}}",
      "allowed_tools": [
        "knowledge_agent_retrieve"
      ]
    }
  ]
}

###

### 4.2 Create thread for the Assistant (capture thread_id from response)
POST {{foundry-endpoint}}/threads?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{}

###

### 4.3 Add user question to the thread
# Replace THREAD_ID_HERE with actual thread_id from previous response
POST {{foundry-endpoint}}/threads/THREAD_ID_HERE/messages?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
  "role": "user",
  "content": "<your-user-question>"
}

###

### 4.4 Run the Assistant with MCP headers
# Replace THREAD_ID_HERE and ASSISTANT_ID_HERE with actual values
POST {{foundry-endpoint}}/threads/THREAD_ID_HERE/runs?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
  "assistant_id": "ASSISTANT_ID_HERE",
  "tool_resources": {
    "mcp": [
      {
        "server_label": "{{mcp-server-label}}",
        "require_approval": "never",
        "headers": {
          "api-key": "{{search-api-key}}"
        }
      }
    ]
  }
}

###

### 4.5 Poll Assistant run status
# Replace THREAD_ID_HERE and RUN_ID_HERE with actual values from the run response
# Poll this endpoint until status is 'completed', 'failed', or 'cancelled'
GET {{foundry-endpoint}}/threads/THREAD_ID_HERE/runs/RUN_ID_HERE?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

###

### 4.6 Get Assistant thread messages
# Replace THREAD_ID_HERE with actual thread_id
# Only call this after the run status is 'completed'
GET {{foundry-endpoint}}/threads/THREAD_ID_HERE/messages?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

################################################################################
# üßπ SECTION 5: CLEANUP
################################################################################

### 5.1 Delete Foundry Assistant (if created)
DELETE {{foundry-endpoint}}/assistants/{{foundry-assistant-name}}?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

###

### 5.2 Delete Knowledge Base / Agent
DELETE {{search-endpoint}}/agents/{{knowledge-base}}?api-version={{search-api-version}}
api-key: {{search-api-key}}

###

### 5.3 Delete Knowledge Sources
DELETE {{search-endpoint}}/knowledgeSources/{{ks-primary-source}}?api-version={{search-api-version}}
api-key: {{search-api-key}}
###
DELETE {{search-endpoint}}/knowledgeSources/{{ks-secondary-source}}?api-version={{search-api-version}}
api-key: {{search-api-key}}

################################################################################
# üìñ ADDITIONAL NOTES
################################################################################
#
# MCP (Model Context Protocol) Integration:
# - MCP Server URL format: {search-endpoint}/agents/{agent-name}/mcp?api-version={version}
# - MCP Server Label: Use underscores only (no hyphens or special chars)
# - Authentication: Pass search-api-key via custom headers in tool_resources
#
# Claude Desktop Integration:
# - Server URL: https://{search-service}.search.windows.net/agents/{agent-name}/mcp?api-version=2025-08-01-Preview
# - Custom Header: api-key: {your-search-api-key}
# - No OAuth required when using API key authentication
#
# Supported Models:
# - Chat: gpt-4o, gpt-4o-mini, gpt-4.1-nano, gpt-4.1-mini, gpt-4.1, gpt-5, gpt-5-mini, gpt-5-nano
# - Embedding: text-embedding-ada-002, text-embedding-3-large, text-embedding-3-small
#
################################################################################