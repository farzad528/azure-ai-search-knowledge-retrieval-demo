################################################################################
# Azure AI Search Knowledge Agent Template (Sanitized)
# Goal: Minimal end-to-end walkthrough from knowledge sources ‚Üí agent ‚Üí retrieval.
# API versions: Search KR = 2025-11-01-Preview, Foundry = 2025-05-01
#
# How to run (no secrets checked in):
#   1) Set environment variables (VS Code REST Client loads .env automatically):
#        setx SEARCH_API_KEY "<your-search-admin-or-query-key>"
#        setx FOUNDRY_API_KEY "<your-foundry-api-key>"
#        setx FOUNDRY_BEARER_TOKEN "Bearer <aad-bearer-token>"
#   2) Replace ALL angle-bracket placeholders (<...>) below.
#   3) Prepare blob content for each knowledge source (folder paths configurable).
#   4) Send requests from VS Code "REST Client" or Thunder Client.
#
# Supported chat / completion deployments (use exactly these model names):
#   gpt-4o | gpt-4o-mini | gpt-4.1-nano | gpt-4.1-mini | gpt-4.1 | gpt-5 | gpt-5-mini | gpt-5-nano
#
# Supported embedding deployments:
#   text-embedding-ada-002 | text-embedding-3-large | text-embedding-3-small
################################################################################

################################################################################
# ‚öôÔ∏è CONFIGURATION & AUTHENTICATION
################################################################################

### Azure AI Search endpoint and API version
@url = https://<your-search-service>.search.windows.net
@search-endpoint = {{url}}
@api-version = 2025-11-01-Preview
@search-api-version = {{api-version}}
@service-name = <your-search-service-name>

### Azure AI Foundry / Azure OpenAI Configuration
# Note: Only Azure OpenAI models are supported for knowledge sources and agents at this time
@foundry-endpoint = https://<your-foundry-resource>.cognitiveservices.azure.com/
@foundry-project = {{foundry-endpoint}}
@foundry-key = {{$env FOUNDRY_API_KEY}}
@foundry-api-key = {{foundry-key}}
@foundry-embedding = <your-embedding-deployment>           // e.g., text-embedding-3-large
@foundry-chat = <your-chat-deployment>                     // e.g., gpt-4.1-mini

### Azure Blob Storage Configuration
@blob-connection-string = {{$env BLOB_CONNECTION_STRING}}
@storage-resource-id = /subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>
@storage-container = <your-blob-container>

### Security headers (store tokens in env vars; refresh before every session)
# PowerShell example:
#   az account get-access-token --resource https://search.azure.com --query accessToken -o tsv
@search-api-key = {{$env SEARCH_API_KEY}}
@key = {{search-api-key}}
@optional-user-token = {{$env OPTIONAL_USER_TOKEN}}        // optional Bearer token for user context

### SharePoint Configuration (Requires Application Permissions)
@indexed-sp-connection-string = SharePointOnlineEndpoint=https://<your-site>.sharepoint.com/sites/<your-site>;ApplicationId=<your-app-id>;ApplicationSecret=<your-app-secret>;TenantId=<your-tenant>

### Fabric OneLake Configuration (Requires MI Permissions)
@fabric-workspace-guid = <your-fabric-workspace-guid>
@lakehouse-guid = <your-lakehouse-guid>

### Fabric Ontology MCP Configuration
@ontology-server-url = <your-fabric-ontology-mcp-server-url>
@ontology-knowledge-agent-name = <your-ontology-agent-name>
@ontology-mwc-token = MwcToken <your-mwc-token>

### Logical resource names (rename to fit your scenario)
@ks-prefix = <your-knowledge-source-prefix>                // e.g., "demo"
@ks-primary-source = {{ks-prefix}}-primary-source
@ks-secondary-source = {{ks-prefix}}-secondary-source
@knowledge-base = {{ks-prefix}}-knowledge-base

### Optional: Azure AI Foundry project (needed for Section 4)
@foundry-project-endpoint = https://<your-foundry-resource>.services.ai.azure.com/api/projects/<your-project-id>
@foundry-api-version = 2025-05-01
@foundry-bearer-token = {{$env FOUNDRY_BEARER_TOKEN}}

### Logical resource names for Foundry Assistant
@foundry-assistant-name = {{ks-prefix}}-agent

### MCP/Foundry wiring (used in Section 4)
@mcp-server-label = <your_mcp_label>                       // letters, numbers, underscores only (e.g., demo_knowledge_agent)
@mcp-server-url = {{search-endpoint}}/agents/{{knowledge-base}}/mcp?api-version={{search-api-version}}

################################################################################
# ÔøΩ SECTION 1: LIST & MANAGE KNOWLEDGE BASES
################################################################################

### 1.1 List Knowledge Bases
GET {{url}}/knowledgebases?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 1.2 Delete Knowledge Base
DELETE {{url}}/knowledgebases/<kb-to-delete>?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 1.3 Get Knowledge Base (minimal)
GET {{url}}/knowledgebases/{{knowledge-base}}-minimal?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 1.4 Retrieve from minimal Knowledge Base
POST {{url}}/knowledgebases/{{knowledge-base}}-minimal/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "intents": [
        {
            "type": "semantic",
            "search": "What documents are available?"
        }
    ]
}

###

### 1.5 Get Knowledge Base (with reasoning)
GET {{url}}/knowledgebases/{{knowledge-base}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 1.6 Retrieve from knowledge base with messages format
POST {{url}}/knowledgebases/{{knowledge-base}}/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": [
                { "type": "text", "text": "What information is available in the documents?" }
            ]
        }
    ],
    "includeActivity": true,
    "knowledgeSourceParams": [
        {
            "knowledgeSourceName": "{{ks-primary-source}}",
            "kind": "azureBlob",
            "includeReferences": true,
            "includeReferenceSourceData": true
        }
    ]
}

###

### 1.7 Retrieve from knowledge base with custom settings
POST {{url}}/knowledgebases/{{knowledge-base}}/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": [
                { "type": "text", "text": "Summarize the key points from the documents" }
            ]
        }
    ],
    "retrievalReasoningEffort": { "kind": "low" },
    "outputMode": "extractiveData",
    "maxRuntimeInSeconds": 30,
    "maxOutputSize": 6000
}

################################################################################
# üì¶ SECTION 2: KNOWLEDGE SOURCES - LIST & MANAGE
################################################################################

### 2.1 List Knowledge Sources
GET {{url}}/knowledgesources?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 2.2 Delete Knowledge Source
DELETE {{url}}/knowledgesources/<ks-to-delete>?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 2.3 Get existing Knowledge Source
GET {{url}}/knowledgesources/{{ks-primary-source}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 2.4 Check Knowledge Source Status
GET {{url}}/knowledgesources/{{ks-primary-source}}/status?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

################################################################################
# üì¶ SECTION 3: CREATE KNOWLEDGE SOURCES - AZURE BLOB
################################################################################

### 3.1 Create / Update Azure Blob Knowledge Source (Primary)
# Description: Primary content source (e.g., FAQ, quick-start guides)
# Use case: How-to questions, getting started documentation
PUT {{url}}/knowledgesources/{{ks-primary-source}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "{{ks-primary-source}}",
    "kind": "azureBlob",
    "description": "Primary knowledge source (e.g., FAQ, quick-start guides)",
    "azureBlobParameters": {
        "connectionString": "{{blob-connection-string}}",
        "containerName": "{{storage-container}}",
        "folderPath": null,
        "isADLSGen2": false,
        "ingestionParameters": {
            "identity": null,
            "embeddingModel": {
                "kind": "azureOpenAI",
                "azureOpenAIParameters": {
                    "deploymentId": "{{foundry-embedding}}",
                    "modelName": "{{foundry-embedding}}",
                    "resourceUri": "{{foundry-endpoint}}",
                    "apiKey": "{{foundry-key}}"
                }
            },
            "chatCompletionModel": null,
            "disableImageVerbalization": false,
            "ingestionSchedule": null,
            "ingestionPermissionOptions": [],
            "contentExtractionMode": "standard",
            "aiServices": {
                "uri": "{{foundry-endpoint}}",
                "apiKey": "{{foundry-key}}"
            }
        }
    }
}

###

### 3.2 Create / Update Azure Blob Knowledge Source (Secondary)
# Description: Secondary content source (e.g., policy PDFs, compliance docs)
# Use case: Policy guidance, compliance questions
PUT {{url}}/knowledgesources/{{ks-secondary-source}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "{{ks-secondary-source}}",
    "kind": "azureBlob",
    "description": "Secondary knowledge source (e.g., policy PDFs, compliance docs)",
    "azureBlobParameters": {
        "connectionString": "{{blob-connection-string}}",
        "containerName": "{{storage-container}}",
        "folderPath": "<folder-path-for-secondary-docs>/",
        "isADLSGen2": false,
        "ingestionParameters": {
            "identity": null,
            "embeddingModel": {
                "kind": "azureOpenAI",
                "azureOpenAIParameters": {
                    "deploymentId": "{{foundry-embedding}}",
                    "modelName": "{{foundry-embedding}}",
                    "resourceUri": "{{foundry-endpoint}}",
                    "apiKey": "{{foundry-key}}"
                }
            },
            "chatCompletionModel": null,
            "disableImageVerbalization": false,
            "ingestionSchedule": null,
            "ingestionPermissionOptions": [],
            "contentExtractionMode": "standard",
            "aiServices": {
                "uri": "{{foundry-endpoint}}",
                "apiKey": "{{foundry-key}}"
            }
        }
    }
}

################################################################################
# üì¶ SECTION 4: CREATE KNOWLEDGE SOURCES - OTHER TYPES
################################################################################

### 4.1 Create / Update Web Knowledge Source
# NOT TESTABLE WITHOUT PROPER WEB CONFIGURATION
PUT {{url}}/knowledgesources/web-ks?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "web-ks",
    "kind": "web",
    "description": "A sample web knowledge source",
    "webParameters": {
        "domains": {
            "allowedDomains": [ 
                { "address": "learn.microsoft.com", "includeSubPages": false }
            ],
            "blockedDomains": [ 
                { "address": "bing.com", "includeSubPages": false } 
            ]
        }
    }
}

###

### 4.2 Create / Update Remote SharePoint Knowledge Source
# NOT TESTABLE WITHOUT PROPER SHAREPOINT CONFIGURATION
PUT {{url}}/knowledgesources/remote-sharepoint-ks?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "remote-sharepoint-ks",
    "kind": "remoteSharePoint",
    "description": "A sample remote sharepoint knowledge source",
    "remoteSharePointParameters": {
        "filterExpression": "filetype:docx",
        "resourceMetadata": [ "Author", "Title" ],
        "containerTypeId": null
    }
}

###

### 4.3 Create / Update Indexed SharePoint Knowledge Source
PUT {{url}}/knowledgesources/indexed-sharepoint-ks?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "indexed-sharepoint-ks",
    "kind": "indexedSharePoint",
    "description": "A sample indexed sharepoint knowledge source",
    "indexedSharePointParameters": {
        "connectionString": "{{indexed-sp-connection-string}}",
        "containerName": "defaultSiteLibrary",
        "query": null,
        "ingestionParameters": {
            "identity": null,
            "embeddingModel": {
                "kind": "azureOpenAI",
                "azureOpenAIParameters": {
                    "deploymentId": "{{foundry-embedding}}",
                    "modelName": "{{foundry-embedding}}",
                    "resourceUri": "{{foundry-endpoint}}",
                    "apiKey": "{{foundry-key}}"
                }
            },
            "chatCompletionModel": null,
            "disableImageVerbalization": false,
            "ingestionSchedule": null,
            "ingestionPermissionOptions": [],
            "contentExtractionMode": "minimal"
        }
    }
}

###

### 4.4 Create / Update Indexed OneLake Knowledge Source
# NOT TESTABLE WITHOUT PROPER FABRIC CONFIGURATION
PUT {{url}}/knowledgesources/indexed-onelake-ks?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "indexed-onelake-ks",
    "kind": "indexedOneLake",
    "description": "A sample indexed onelake knowledge source",
    "indexedOneLakeParameters": {
        "fabricWorkspaceId": "{{fabric-workspace-guid}}",
        "lakehouseId": "{{lakehouse-guid}}",
        "targetPath": null,
        "ingestionParameters": {
            "identity": null,
            "embeddingModel": {
                "kind": "azureOpenAI",
                "azureOpenAIParameters": {
                    "deploymentId": "{{foundry-embedding}}",
                    "modelName": "{{foundry-embedding}}",
                    "resourceUri": "{{foundry-endpoint}}",
                    "apiKey": "{{foundry-key}}"
                }
            },
            "chatCompletionModel": null,
            "disableImageVerbalization": false,
            "ingestionSchedule": null,
            "ingestionPermissionOptions": [],
            "contentExtractionMode": "standard"
        }
    }
}

################################################################################
# üì¶ SECTION 5: MCP TOOL KNOWLEDGE SOURCES - MICROSOFT LEARN
################################################################################

### 5.1 Create / Update MCP Tool Knowledge Source - Microsoft Learn
PUT {{url}}/knowledgesources/msftlearn-mcp?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "msftlearn-mcp",
    "kind": "mcpTool",
    "description": "Official Microsoft documentation for all Microsoft products via MCP",
    "mcpToolParameters": {
        "serverURL": "https://learn.microsoft.com/api/mcp",
        "toolName": "microsoft_docs_search"
    }
}

###

### 5.2 Get MCP Knowledge Source
GET {{url}}/knowledgesources/msftlearn-mcp?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 5.3 Create Knowledge Agent with Microsoft Learn MCP
PUT {{url}}/knowledgebases/mslearn-agent?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "mslearn-agent",
    "knowledgeSources": [
        {
            "name": "msftlearn-mcp",
            "alwaysQuerySource": true,
            "includeReferences": true,
            "includeReferenceSourceData": true
        }
    ],
    "models": [
        {
            "kind": "azureOpenAI",
            "azureOpenAIParameters": {
                "resourceUri": "{{foundry-endpoint}}",
                "apiKey": "{{foundry-key}}",
                "deploymentId": "{{foundry-chat}}",
                "modelName": "{{foundry-chat}}"
            }
        }
    ]
}

###

### 5.4 Retrieve from Microsoft Learn Agent
POST {{url}}/knowledgebases/mslearn-agent/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "What is Azure Redis Cache and how do I use it?"
                }
            ]
        }
    ],
    "knowledgeSourceParams": [
        {
            "knowledgeSourceName": "msftlearn-mcp",
            "kind": "mcpTool",
            "includeReferences": true,
            "includeReferenceSourceData": true
        }
    ]
}

################################################################################
# üì¶ SECTION 6: FABRIC ONTOLOGY MCP DEMO
################################################################################

### 6.1 Create Knowledge Source - OntologyListEntitiesTool
PUT {{url}}/knowledgesources/ontology-list-entities?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "ontology-list-entities",
    "kind": "mcpTool",
    "description": "Retrieves a list of all entity types, including details like property names, types, and telemetry.",
    "mcpToolParameters": {
        "serverURL": "{{ontology-server-url}}",
        "toolName": "ListEntitiesTool"
    }
}

###

### 6.2 Create Knowledge Source - NLtoOntologyTool
PUT {{url}}/knowledgesources/ontology-nl-to-query?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "ontology-nl-to-query",
    "kind": "mcpTool",
    "description": "Translates a natural language query into a formal query representation for the ontology.",
    "mcpToolParameters": {
        "serverURL": "{{ontology-server-url}}",
        "toolName": "NLtoOntologyTool"
    }
}

###

### 6.3 Create Knowledge Source - GetEntityTool
PUT {{url}}/knowledgesources/ontology-get-entity?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "ontology-get-entity",
    "kind": "mcpTool",
    "description": "Fetches details about a specific entity type, such as its properties and telemetry.",
    "mcpToolParameters": {
        "serverURL": "{{ontology-server-url}}",
        "toolName": "GetEntityTool"
    }
}

###

### 6.4 Get Ontology Knowledge Sources
GET {{url}}/knowledgesources?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 6.5 Create Ontology Knowledge Agent
PUT {{url}}/knowledgebases/{{ontology-knowledge-agent-name}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "{{ontology-knowledge-agent-name}}",
    "knowledgeSources": [
        {
            "name": "ontology-list-entities"
        },
        {
            "name": "ontology-nl-to-query"
        },
        {
            "name": "ontology-get-entity"
        }
    ],
    "models": [
        {
            "kind": "azureOpenAI",
            "azureOpenAIParameters": {
                "resourceUri": "{{foundry-endpoint}}",
                "apiKey": "{{foundry-key}}",
                "deploymentId": "{{foundry-chat}}",
                "modelName": "{{foundry-chat}}"
            }
        }
    ]
}

###

### 6.6 Get Ontology Knowledge Agent
GET {{url}}/knowledgebases/{{ontology-knowledge-agent-name}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 6.7 List All Agents (Including Ontology)
GET {{url}}/knowledgebases?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 6.8 Query Ontology - Example Query
POST {{url}}/knowledgebases/{{ontology-knowledge-agent-name}}/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "show me entities in your database"
                }
            ]
        }
    ],
    "knowledgeSourceParams": [
        {
            "knowledgeSourceName": "ontology-list-entities",
            "headers": {
                "Authorization": "{{ontology-mwc-token}}"
            },
            "kind": "mcpTool",
            "includeReferences": true,
            "includeReferenceSourceData": true,
            "rerankerThreshold": 0.1
        },
        {
            "knowledgeSourceName": "ontology-nl-to-query",
            "headers": {
                "Authorization": "{{ontology-mwc-token}}"
            },
            "kind": "mcpTool",
            "includeReferences": true,
            "includeReferenceSourceData": true,
            "rerankerThreshold": 0.1
        },
        {
            "knowledgeSourceName": "ontology-get-entity",
            "headers": {
                "Authorization": "{{ontology-mwc-token}}"
            },
            "kind": "mcpTool",
            "includeReferences": true,
            "includeReferenceSourceData": true,
            "rerankerThreshold": 0.1
        }
    ]
}

################################################################################
# üß† SECTION 7: CREATE KNOWLEDGE BASE / AGENT
################################################################################

### 7.1 Create Knowledge Base
# Purpose: Generic knowledge agent that blends multiple content sources
# Knowledge Sources: Primary (how-to) + Secondary (policy/compliance)
# Retrieval Logic: Route based on query intent
# Note: Only Azure OpenAI models are supported at this time
PUT {{url}}/knowledgebases/{{knowledge-base}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "name": "{{knowledge-base}}",
    "knowledgeSources": [
        {
            "name": "{{ks-primary-source}}",
            "alwaysQuerySource": true,
            "includeReferences": true,
            "includeReferenceSourceData": true
        },
        {
            "name": "{{ks-secondary-source}}",
            "alwaysQuerySource": true,
            "includeReferences": true,
            "includeReferenceSourceData": true
        }
    ],
    "models": [
        {
            "kind": "azureOpenAI",
            "azureOpenAIParameters": {
                "resourceUri": "{{foundry-endpoint}}",
                "apiKey": "{{foundry-key}}",
                "deploymentId": "{{foundry-chat}}",
                "modelName": "{{foundry-chat}}"
            }
        }
    ]
}

################################################################################
# üîç SECTION 8: TEST RETRIEVAL FLOWS
################################################################################

### 8.1 Simple Query: How-to question
# Expected: Response from primary knowledge source
# Difficulty: Simple - direct lookup
POST {{url}}/knowledgebases/{{knowledge-base}}/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ask a representative question that should draw from the primary knowledge source."
                }
            ]
        }
    ]
}

###

### 8.2 Moderate Query: Policy & guidelines scenario
# Expected: Response from secondary knowledge source
# Difficulty: Moderate - requires policy/compliance knowledge
POST {{url}}/knowledgebases/{{knowledge-base}}/retrieve?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ask a question that should rely on the policy or compliance source."
                }
            ]
        }
    ]
}

################################################################################
# ü§ù SECTION 9: CREATE AZURE AI FOUNDRY ASSISTANT WITH MCP
################################################################################

### 9.1 Create Foundry Assistant
# Purpose: Expose knowledge-base through Azure AI Foundry with MCP integration
# MCP Server Label: Use underscores only (no hyphens)
# Note: Only Azure OpenAI models are supported at this time
POST {{foundry-project-endpoint}}/assistants?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
    "name": "{{foundry-assistant-name}}",
    "model": "{{foundry-chat}}",
    "instructions": "You are a knowledge assistant. Answer only from approved knowledge sources using your MCP Knowledge tool. Always cite your sources and be concise.",
    "tools": [
        {
            "type": "mcp",
            "server_label": "{{mcp-server-label}}",
            "server_url": "{{mcp-server-url}}",
            "allowed_tools": [
                "knowledge_agent_retrieve"
            ]
        }
    ]
}

###

### 9.2 Create thread for the Assistant (capture thread_id from response)
POST {{foundry-project-endpoint}}/threads?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{}

###

### 9.3 Add user question to the thread
# Replace THREAD_ID_HERE with actual thread_id from previous response
POST {{foundry-project-endpoint}}/threads/THREAD_ID_HERE/messages?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
    "role": "user",
    "content": "<your-user-question>"
}

###

### 9.4 Run the Assistant with MCP headers
# Replace THREAD_ID_HERE and ASSISTANT_ID_HERE with actual values
POST {{foundry-project-endpoint}}/threads/THREAD_ID_HERE/runs?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}
Content-Type: application/json

{
    "assistant_id": "ASSISTANT_ID_HERE",
    "tool_resources": {
        "mcp": [
            {
                "server_label": "{{mcp-server-label}}",
                "require_approval": "never",
                "headers": {
                    "api-key": "{{search-api-key}}"
                }
            }
        ]
    }
}

###

### 9.5 Poll Assistant run status
# Replace THREAD_ID_HERE and RUN_ID_HERE with actual values from the run response
# Poll this endpoint until status is 'completed', 'failed', or 'cancelled'
GET {{foundry-project-endpoint}}/threads/THREAD_ID_HERE/runs/RUN_ID_HERE?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

###

### 9.6 Get Assistant thread messages
# Replace THREAD_ID_HERE with actual thread_id
# Only call this after the run status is 'completed'
GET {{foundry-project-endpoint}}/threads/THREAD_ID_HERE/messages?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

################################################################################
# üßπ SECTION 10: CLEANUP
################################################################################

### 10.1 Delete Foundry Assistant (if created)
DELETE {{foundry-project-endpoint}}/assistants/{{foundry-assistant-name}}?api-version={{foundry-api-version}}
Authorization: {{foundry-bearer-token}}

###

### 10.2 Delete Knowledge Base / Agent
DELETE {{url}}/knowledgebases/{{knowledge-base}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

### 10.3 Delete Knowledge Sources
DELETE {{url}}/knowledgesources/{{ks-primary-source}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

###

DELETE {{url}}/knowledgesources/{{ks-secondary-source}}?api-version={{api-version}}&service={{service-name}}
api-key: {{key}}

################################################################################
# üìñ ADDITIONAL NOTES
################################################################################
#
# API Version: 2025-11-01-Preview
# - This template uses the November 2025 preview API version
# - Includes support for knowledge bases, knowledge sources, and retrieval
# - Enhanced support for MCP (Model Context Protocol) integration
#
# Knowledge Source Types Supported:
# - azureBlob: Azure Blob Storage containers
# - web: Web-based knowledge sources
# - remoteSharePoint: Remote SharePoint sites
# - indexedSharePoint: Indexed SharePoint with ingestion
# - indexedOneLake: Fabric OneLake with ingestion
# - mcpTool: MCP tool-based knowledge sources (e.g., Microsoft Learn, Fabric Ontology)
#
# MCP (Model Context Protocol) Integration:
# - MCP Server URL format: {search-endpoint}/agents/{agent-name}/mcp?api-version={version}
# - MCP Server Label: Use underscores only (no hyphens or special chars)
# - Authentication: Pass search-api-key via custom headers in tool_resources
# - Custom headers can be passed per knowledge source in retrieve requests
#
# Claude Desktop Integration:
# - Server URL: https://{search-service}.search.windows.net/agents/{agent-name}/mcp?api-version=2025-11-01-Preview
# - Custom Header: api-key: {your-search-api-key}
# - No OAuth required when using API key authentication
#
# Supported Models:
# - Chat: gpt-4o, gpt-4o-mini, gpt-4.1-nano, gpt-4.1-mini, gpt-4.1, gpt-5, gpt-5-mini, gpt-5-nano
# - Embedding: text-embedding-ada-002, text-embedding-3-large, text-embedding-3-small
#
# Ingestion Parameters:
# - contentExtractionMode: "minimal" or "standard"
# - ingestionSchedule: Optional automated refresh schedule
# - ingestionPermissionOptions: Security trimming configuration
# - disableImageVerbalization: Control image OCR processing
#
# Retrieval Options:
# - includeActivity: Show retrieval activity details
# - retrievalReasoningEffort: Control reasoning depth (low/medium/high)
# - outputMode: "answerSynthesis" or "extractiveData"
# - maxRuntimeInSeconds: Timeout for retrieval operations
# - maxOutputSize: Maximum response size in tokens
# - rerankerThreshold: Minimum relevance score for results
#
################################################################################